{
  "version": 3,
  "sources": ["../../../src/scripts/pages/accounts/AccountItem.ts", "../../../src/scripts/pages/accounts/index.ts"],
  "sourcesContent": ["export default class AccountItem {\n    private template: HTMLTemplateElement | null;\n\n    constructor() {\n        this.template = document.querySelector(\"#accountsItem\");\n    }\n\n    private toLocalStringRounded(value: number): string {\n        return Math.round(value).toLocaleString();\n    }\n\n    render(data: AccountExtend): HTMLElement | null {\n        if (!this.template) {\n            console.error(\"Template is not found.\");\n            return null;\n        }\n\n        const {\n            avg_buy_price,\n            // avg_buy_price_modified,\n            // balance,\n            buy_price,\n            currency,\n            // locked,\n            unit_currency,\n            volume,\n            trade_price,\n        } = data;\n\n        const difference = trade_price - avg_buy_price;\n        const gainsLosses = difference * volume;\n        const appraisalPrice = buy_price + gainsLosses;\n        const returnRate = (difference / avg_buy_price) * 100;\n\n        const values = {\n            h3: currency,\n            \".volume\": volume.toString(),\n            \".avgBuyPrice .value\": this.toLocalStringRounded(avg_buy_price),\n            \".buyPrice .value\": this.toLocalStringRounded(buy_price),\n            \".gainsLosses .value\": this.toLocalStringRounded(gainsLosses),\n            \".returnRate .value\": returnRate.toFixed(2),\n            \".appraisalPrice .value\": this.toLocalStringRounded(appraisalPrice),\n        };\n\n        const template = this.template.content.firstElementChild;\n        const element = template?.cloneNode(true) as HTMLElement;\n\n        for (const [selector, value] of Object.entries(values)) {\n            element.querySelector(selector)!.textContent = value;\n        }\n\n        element.querySelectorAll(\".unit\").forEach((el) => {\n            el.textContent = unit_currency;\n        });\n\n        return element;\n    }\n}\n", "import AccountItem from \"./AccountItem\";\n\nclass AccountManager {\n    constructor() {\n        this.initializeAccounts();\n    }\n\n    private async fetchData(url: string) {\n        try {\n            const response = await fetch(url, { method: \"GET\" });\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.warn(error instanceof Error ? error.message : error);\n        }\n    }\n\n    private async initializeAccounts() {\n        const accounts = await this.fetchData(\"/getAccounts\");\n        this.updateAccountsWithTickers(accounts);\n    }\n\n    private async updateAccountsWithTickers(myAccounts: Account[]) {\n        const tickers = await this.fetchData(\"/getTickers\");\n        this.combineAccountsWithTickers(myAccounts, tickers);\n    }\n\n    private combineAccountsWithTickers(\n        myAccounts: Account[],\n        ticekrs: Ticker[]\n    ) {\n        if (myAccounts.length === undefined) return;\n\n        const data = myAccounts.map((account, index) => {\n            const { trade_price } = ticekrs[index];\n            return {\n                ...account,\n                trade_price,\n            };\n        });\n\n        this.displayAccounts(data);\n    }\n\n    private displayAccounts(myAccounts: AccountExtend[]) {\n        const accountItem = new AccountItem();\n        const fragment = new DocumentFragment();\n\n        myAccounts\n            .map((account) => accountItem.render(account))\n            .forEach((element) => fragment.appendChild(element!));\n\n        document.querySelector(\"ul\")?.appendChild(fragment);\n    }\n}\n\nnew AccountManager();\n"],
  "mappings": ";;;;;;;;;;;AAAA,MAAqB;AAArB;;;MAAqB,cAArB,MAAgC;QAG5B,cAAA;AACI,eAAK,WAAW,SAAS,cAAc,eAAe;QAC1D;QAEQ,qBAAqB,OAAa;AACtC,iBAAO,KAAK,MAAM,KAAK,EAAE,eAAc;QAC3C;QAEA,OAAO,MAAmB;AACtB,cAAI,CAAC,KAAK,UAAU;AAChB,oBAAQ,MAAM,wBAAwB;AACtC,mBAAO;;AAGX,gBAAM,EACF,eAGA,WACA,UAEA,eACA,QACA,YAAW,IACX;AAEJ,gBAAM,aAAa,cAAc;AACjC,gBAAM,cAAc,aAAa;AACjC,gBAAM,iBAAiB,YAAY;AACnC,gBAAM,aAAc,aAAa,gBAAiB;AAElD,gBAAM,SAAS;YACX,IAAI;YACJ,WAAW,OAAO,SAAQ;YAC1B,uBAAuB,KAAK,qBAAqB,aAAa;YAC9D,oBAAoB,KAAK,qBAAqB,SAAS;YACvD,uBAAuB,KAAK,qBAAqB,WAAW;YAC5D,sBAAsB,WAAW,QAAQ,CAAC;YAC1C,0BAA0B,KAAK,qBAAqB,cAAc;;AAGtE,gBAAM,WAAW,KAAK,SAAS,QAAQ;AACvC,gBAAM,UAAU,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,UAAU,IAAI;AAExC,qBAAW,CAAC,UAAU,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AACpD,oBAAQ,cAAc,QAAQ,EAAG,cAAc;;AAGnD,kBAAQ,iBAAiB,OAAO,EAAE,QAAQ,CAAC,OAAM;AAC7C,eAAG,cAAc;UACrB,CAAC;AAED,iBAAO;QACX;;;;;;;;ACxDJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,UAAM,iBAAN,MAAoB;QAChB,cAAA;AACI,eAAK,mBAAkB;QAC3B;QAEc,UAAU,KAAW;;AAC/B,gBAAI;AACA,oBAAM,WAAW,MAAM,MAAM,KAAK,EAAE,QAAQ,MAAK,CAAE;AACnD,oBAAM,OAAO,MAAM,SAAS,KAAI;AAChC,qBAAO;qBACF,OAAO;AACZ,sBAAQ,KAAK,iBAAiB,QAAQ,MAAM,UAAU,KAAK;;UAEnE,CAAC;;QAEa,qBAAkB;;AAC5B,kBAAM,WAAW,MAAM,KAAK,UAAU,cAAc;AACpD,iBAAK,0BAA0B,QAAQ;UAC3C,CAAC;;QAEa,0BAA0B,YAAqB;;AACzD,kBAAM,UAAU,MAAM,KAAK,UAAU,aAAa;AAClD,iBAAK,2BAA2B,YAAY,OAAO;UACvD,CAAC;;QAEO,2BACJ,YACA,SAAiB;AAEjB,cAAI,WAAW,WAAW;AAAW;AAErC,gBAAM,OAAO,WAAW,IAAI,CAAC,SAAS,UAAS;AAC3C,kBAAM,EAAE,YAAW,IAAK,QAAQ,KAAK;AACrC,mBAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,OAAO,GAAA,EACV,YAAW,CAAA;UAEnB,CAAC;AAED,eAAK,gBAAgB,IAAI;QAC7B;QAEQ,gBAAgB,YAA2B;;AAC/C,gBAAM,cAAc,IAAI,YAAW;AACnC,gBAAM,WAAW,IAAI,iBAAgB;AAErC,qBACK,IAAI,CAAC,YAAY,YAAY,OAAO,OAAO,CAAC,EAC5C,QAAQ,CAAC,YAAY,SAAS,YAAY,OAAQ,CAAC;AAExD,WAAA,KAAA,SAAS,cAAc,IAAI,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAY,QAAQ;QACtD;;AAGJ,UAAI,eAAc;;;",
  "names": []
}
