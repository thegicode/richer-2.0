{
  "version": 3,
  "sources": ["../../../src/scripts/pages/accounts/AccountItem.ts", "../../../src/scripts/pages/accounts/index.ts"],
  "sourcesContent": ["export default class AccountItem {\n    private template: HTMLTemplateElement | null;\n\n    constructor() {\n        this.template = document.querySelector(\"#accountsItem\");\n    }\n\n    render(data: AccountExtend) {\n        const {\n            avg_buy_price,\n            // avg_buy_price_modified,\n            // balance,\n            buy_price,\n            currency,\n            // locked,\n            unit_currency,\n            volume,\n            trade_price,\n        } = data;\n\n        const averageBuyPrice = Math.round(avg_buy_price);\n        const currentPrice = Math.round(trade_price);\n        const difference = currentPrice - averageBuyPrice;\n        const gainsLosses = Math.round(difference * volume);\n        const appraisalPrice = Math.round(buy_price) + gainsLosses;\n        const returnRate = (difference / averageBuyPrice) * 100;\n\n        const template = this.template?.content.firstElementChild;\n        const element = template?.cloneNode(true) as HTMLElement;\n        element.querySelector(\"h3\")!.textContent = currency;\n        element.querySelector(\".volume\")!.textContent = volume.toString();\n\n        element.querySelector(\n            \".avgBuyPrice .value\"\n        )!.textContent = `${averageBuyPrice.toLocaleString()}`;\n\n        element.querySelector(\".buyPrice .value\")!.textContent = `${Math.round(\n            buy_price\n        ).toLocaleString()}`;\n\n        element.querySelector(\n            \".gainsLosses .value\"\n        )!.textContent = `${gainsLosses.toLocaleString()}`;\n\n        element.querySelector(\n            \".returnRate .value\"\n        )!.textContent = `${returnRate.toFixed(2)}`;\n\n        element.querySelector(\n            \".appraisalPrice .value\"\n        )!.textContent = `${appraisalPrice.toLocaleString()}`;\n\n        element.querySelectorAll(\".unit\").forEach((el) => {\n            el.textContent = unit_currency;\n        });\n\n        return element;\n    }\n}\n", "import AccountItem from \"./AccountItem\";\n\nclass Accounts {\n    constructor() {\n        this.getAccounts();\n    }\n\n    private getAccounts() {\n        fetch(`/getAccounts`, {\n            method: \"GET\",\n        })\n            .then((data) => data.json())\n            .then((response) => {\n                this.getTickers(response);\n            })\n            .catch((error) => {\n                console.warn(error instanceof Error ? error.message : error);\n            });\n    }\n\n    private getTickers(myAccounts: Account[]) {\n        fetch(`/getTickers`, {\n            method: \"GET\",\n        })\n            .then((data) => data.json())\n            .then((response) => {\n                this.renderTickers(myAccounts, response);\n            })\n            .catch((error) => {\n                console.warn(error instanceof Error ? error.message : error);\n            });\n    }\n\n    private renderTickers(myAccounts: Account[], tickers: Ticker[]) {\n        const data = myAccounts.map((account, index) => {\n            const { trade_price } = tickers[index];\n\n            // if (market.includes(account.currency) === false) return;\n            return {\n                ...account,\n                trade_price,\n            };\n        });\n\n        this.renderAccounts(data);\n    }\n\n    private renderAccounts(myAccounts: AccountExtend[]) {\n        const accountItem = new AccountItem();\n        const fragment = new DocumentFragment();\n\n        myAccounts\n            .map((account) => accountItem.render(account))\n            .forEach((element) => fragment.appendChild(element));\n\n        document.querySelector(\"ul\")?.appendChild(fragment);\n    }\n}\n\nnew Accounts();\n"],
  "mappings": ";;;AAAA,MAAqB,cAArB,MAAgC;IAG5B,cAAA;AACI,WAAK,WAAW,SAAS,cAAc,eAAe;IAC1D;IAEA,OAAO,MAAmB;;AACtB,YAAM,EACF,eAGA,WACA,UAEA,eACA,QACA,YAAW,IACX;AAEJ,YAAM,kBAAkB,KAAK,MAAM,aAAa;AAChD,YAAM,eAAe,KAAK,MAAM,WAAW;AAC3C,YAAM,aAAa,eAAe;AAClC,YAAM,cAAc,KAAK,MAAM,aAAa,MAAM;AAClD,YAAM,iBAAiB,KAAK,MAAM,SAAS,IAAI;AAC/C,YAAM,aAAc,aAAa,kBAAmB;AAEpD,YAAM,YAAW,KAAA,KAAK,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,QAAQ;AACxC,YAAM,UAAU,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,UAAU,IAAI;AACxC,cAAQ,cAAc,IAAI,EAAG,cAAc;AAC3C,cAAQ,cAAc,SAAS,EAAG,cAAc,OAAO,SAAQ;AAE/D,cAAQ,cACJ,qBAAqB,EACtB,cAAc,GAAG,gBAAgB,eAAc,CAAE;AAEpD,cAAQ,cAAc,kBAAkB,EAAG,cAAc,GAAG,KAAK,MAC7D,SAAS,EACX,eAAc,CAAE;AAElB,cAAQ,cACJ,qBAAqB,EACtB,cAAc,GAAG,YAAY,eAAc,CAAE;AAEhD,cAAQ,cACJ,oBAAoB,EACrB,cAAc,GAAG,WAAW,QAAQ,CAAC,CAAC;AAEzC,cAAQ,cACJ,wBAAwB,EACzB,cAAc,GAAG,eAAe,eAAc,CAAE;AAEnD,cAAQ,iBAAiB,OAAO,EAAE,QAAQ,CAAC,OAAM;AAC7C,WAAG,cAAc;MACrB,CAAC;AAED,aAAO;IACX;;;;ACvDJ,MAAM,WAAN,MAAc;IACV,cAAA;AACI,WAAK,YAAW;IACpB;IAEQ,cAAW;AACf,YAAM,gBAAgB;QAClB,QAAQ;OACX,EACI,KAAK,CAAC,SAAS,KAAK,KAAI,CAAE,EAC1B,KAAK,CAAC,aAAY;AACf,aAAK,WAAW,QAAQ;MAC5B,CAAC,EACA,MAAM,CAAC,UAAS;AACb,gBAAQ,KAAK,iBAAiB,QAAQ,MAAM,UAAU,KAAK;MAC/D,CAAC;IACT;IAEQ,WAAW,YAAqB;AACpC,YAAM,eAAe;QACjB,QAAQ;OACX,EACI,KAAK,CAAC,SAAS,KAAK,KAAI,CAAE,EAC1B,KAAK,CAAC,aAAY;AACf,aAAK,cAAc,YAAY,QAAQ;MAC3C,CAAC,EACA,MAAM,CAAC,UAAS;AACb,gBAAQ,KAAK,iBAAiB,QAAQ,MAAM,UAAU,KAAK;MAC/D,CAAC;IACT;IAEQ,cAAc,YAAuB,SAAiB;AAC1D,YAAM,OAAO,WAAW,IAAI,CAAC,SAAS,UAAS;AAC3C,cAAM,EAAE,YAAW,IAAK,QAAQ,KAAK;AAGrC,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,OAAO,GAAA,EACV,YAAW,CAAA;MAEnB,CAAC;AAED,WAAK,eAAe,IAAI;IAC5B;IAEQ,eAAe,YAA2B;;AAC9C,YAAM,cAAc,IAAI,YAAW;AACnC,YAAM,WAAW,IAAI,iBAAgB;AAErC,iBACK,IAAI,CAAC,YAAY,YAAY,OAAO,OAAO,CAAC,EAC5C,QAAQ,CAAC,YAAY,SAAS,YAAY,OAAO,CAAC;AAEvD,OAAA,KAAA,SAAS,cAAc,IAAI,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAY,QAAQ;IACtD;;AAGJ,MAAI,SAAQ;",
  "names": []
}
